---
# The template platform supports sensors which get their values from other entities.
#
# https://www.home-assistant.io/integrations/template/
#

# Solar
# See: http://sems.com.cn:82/Help/Api/GET-api-version-v2-PowerStation-GetSocStatus
- platform: template
  sensors:
    pv_power_output:
      value_template: "{{ state_attr('sensor.sems_portal', 'outputpower') }}"
      unit_of_measurement: "W"
      friendly_name: "PV Power output"
    pv_temperature:
      value_template: "{{ state_attr('sensor.sems_portal', 'tempperature') }}"
      unit_of_measurement: "C"
      friendly_name: "PV Temperature"
    pv_eday:
      value_template: "{{ state_attr('sensor.sems_portal', 'eday') }}"
      unit_of_measurement: "kWh"
      friendly_name: "PV energy day"
    pv_etotal:
      value_template: "{{ state_attr('sensor.sems_portal', 'etotal') }}"
      unit_of_measurement: "kWh"
      friendly_name: "PV energy total"
    pv_iday:
      value_template: "{{ state_attr('sensor.sems_portal', 'iday') }}"
      unit_of_measurement: "€"
      friendly_name: "PV income day"
    pv_itotal:
      value_template: "{{ state_attr('sensor.sems_portal', 'itotal') }}"
      unit_of_measurement: "€"
      friendly_name: "PV income total"
    pv_excess:
      value_template: "{{ state_attr('sensor.sems_portal', 'pmeter') }}"
      unit_of_measurement: "W"
      friendly_name: "PV spare"
    pv_soc:
      value_template: "{{ state_attr('sensor.sems_portal', 'soc') }}"
      unit_of_measurement: "%"
      friendly_name: "PV Battery power"
    pv_etotal_last_month:
      value_template: "{{ state_attr('sensor.sems_portal', 'lastmonthetotle') }}"
      unit_of_measurement: "kWh"
      friendly_name: "PV energy last month"
    pv_etotal_this_month:
      value_template: "{{ state_attr('sensor.sems_portal', 'thismonthetotle') }}"
      unit_of_measurement: "kWh"
      friendly_name: "PV energy this month"

# Lights
- platform: template
  sensors:
    lights_on_amount:
      friendly_name: "Lights on"
      unit_of_measurement: 'on'
      value_template: >
        {{ states['light'] | selectattr('state', 'eq', 'on') | list | count }}

# Camera
- platform: template
  sensors:
    motion_detection:
      friendly_name: "Motion Detection"
      value_template: "{{ state_attr('camera.tapo_camera_hd', 'motion_detection') == 'on' }}"

# Date & time
- platform: template
  sensors:
    day_of_week:
      friendly_name: "Day of the week"
      icon_template: mdi:calendar-outline
      value_template: >
        {{ ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()] }}

# People
- platform: template
  sensors:
    people_home:
      friendly_name: "People at home"
      icon_template: mdi:home-plus-outline
      unit_of_measurement: people
      value_template: >
        {{ states['person'] | selectattr('state', 'eq', 'home') | list | count }}
    people_away:
      friendly_name: "People away"
      icon_template: mdi:home-minus-outline
      unit_of_measurement: people
      value_template: >
        {{ states['person'] | selectattr('state', 'eq', 'not_home') | list | count }}

# Goodwe
- platform: template
  sensors:
    # Template sensor for values of energy bought (active_power < 0)
    energy_buy:
      friendly_name: "Energy Buy"
      unit_of_measurement: 'W'
      value_template: >-
        {% if states('sensor.goodwe_active_power')|float < 0 %}
          {{ states('sensor.goodwe_active_power')|float * -1 }}
        {% else %}
          {{ 0 }}
        {% endif %}
    # Template sensor for values of energy sold (active_power > 0)
    energy_sell:
      friendly_name: "Energy Sell"
      unit_of_measurement: 'W'
      value_template: >-
        {% if states('sensor.goodwe_active_power')|float > 0 %}
          {{ states('sensor.goodwe_active_power')|float }}
        {% else %}
          {{ 0 }}
        {% endif %}
